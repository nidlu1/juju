Travis CI 배포 자동화

1. CI & CD 소개
    스크립트를 개발자가 직접 실행해서 발생하는 불편을 경험.
        CI(continuous integration 지속적 통합): 코드버전을 관리하는 VCS시스템에 PUSH가 되면 자동으로 테스트와 빌드가 수행되어 배포파일을 만드는과정.
        CD(continuous deployment 지속적 배포) : push되면 자동으로 테스트와 빌드가 수행되어 안정적인 배포파일을 만드는 과정
    CI 도구를 도입했다고해서 CI를 하는 것은 아님
        CI의 규칙
            모든 소스코드가 현재 실행되고 누구든 현재의 소스에 접근할 수 있는 단일지점을 유지할 것.
            빌드 프로세스를 자동화해서 누구든 소스로부터 시스템을 빌드하는 단일 명령어를 사용할 수 있게 할 것
            테스팅을 자동화해서 단일 명령어로 언제든지 시스템에 대한 건전한 테스트 수트를 실행할 수 있게 할 것
            누구나 현재 실행파일을 얻으면 지금까지 가장 완전한 실행파일을 얻었다는 확신을 하게 할 것.

2. Travis CI 연동하기
    Travis CI : 깃허브에서 제공하는 무료 ci서비스
    Travis CI 웹서비스 설정
        https://travis-ci.org/ 로그인-> 계정명->settings에서 설정
    프로젝트 설정
        travis ci 상세설정은 프로젝트에 존재하는 .travis.yml 파일로 가능
            yml은 YAML(야믈)이라 지칭, JSON에서 괄호를 제거한 것. 기계에서 파싱하기 쉽게, 사람이 다루기 쉽게가 이념.
        build.gradle과 같은 위치에서 .travis.yml 생성.
            language: java
            jdk:
                -openjdk8
            branches: //Travis CI를 어느 브랜치가 푸시될 때 수행할 지 지정. 현 옵션은 master 브랜치에 push될 때 수행.
              only:
                - master

            # Travis CI 서버의 HOME
            cache: //그레이들을 통해 의존성을 받으면 이를 해당 디렉토리에 캐시하여, 같은 의존성은 다음 배포 때부터 받지 않도록 설정
              directories:
                - '$HOME/.m2/repository'
                - '$HOME/.gradle'
              script: "./gradlew clean build" // master브랜치에 푸시되었을 때 수행하는 명렁어. 여기서는 프로젝트 내부에 둔 gradlew을 통해 clean & build를 수행.

            #CI 실행 완료시 메일로 알람
            notifications: //travis ci 실행 완료시 자동으로 알람이 가도록 설정.
              email:
                recipients:
                  - nidlu1@naver.com

        master브랜치에 커밋과 푸시함. 1번 테스트 실패.

3. travis ci와 aws s3 연동하기
    s3: aws에서 제공하는 일종의 파일 서버. 이미지를 비롯한 정적파일 관리하거나, 지금 진행하는 것처럼 배포파일들을 관리하는 기능 지원.
        이미지 업로드를 구현시 s3를 이용해 구현.
    travis ci 연동시 구조: https://jojoldu.tistory.com/265
        s3을 연동이 먼저 필요한 이유는 jar를 전달하기 위해.
        codedeploy는 저장기능이 없음. 그래서 travis ci 가 빌드한 결과물을 받아서 codedeploy가 가져갈 수 있도록 공간이 필요해 aws s3을 이용함.

    AWS key 발급
        일반적으로 AWS서비스에 외부서비스 접근 불가능. 접근가능한 key를 생성해야함. IAM가 서비스함.
            사용자추가: 엑세스유형은 프로그래밍방식.
            권한정책은 기존정책 직접연결-> amazons3fullaccess 체크, AWSCodeDeployFullAccess 체크
            태그는 nidlu
        사용자: nidlu-travis-deploy
        액세스키: AKIAZ5XBFTYAWINLND6Z
        비밀엑세스키: EQJeq/AFuo5bqHjKxjzxB8tnHfxQ25K8sVhe7cjf

    travis CI에 키등록
        more option - setting - Environment Variables
        $변수명으로 yml에서 사용가능.

    s3버킷 생성
        다음으로 s3에 관해 설정을 진행. aws의 s3 서비스는 일종의 파일서버: 순수하게 파일들을 저장하고 접근권한을 관리, 검색등을 지원하는 파일서버의 역할.
            s3은 게시글을 쓸 때 나오는 첨부파일 등록을 구현할 때 많이 이용.
            travis ci에서 생성된 build파일을 저장하도록 구성.
            s3애서 저장된 build파일은 이후 aws의 codedeploy에서 배포할 파일로 가져가도록 구성.
        aws서비스에서 s3을 검색하고 버킷 생성.
            버킷 이름은 배포할 zip파일이 모여있는 장소임을 의미하도록.
            퍼블릭엑세스 설정: 실제 서비스시 jar파일이 퍼블릭이면 누구나 내려받을 수 있어 코드,설정값, 주요키 값이 다 탈취된다.
                퍼플릭이 아니더라도 iam 사용자로 발급받은 키를 사용하니 접근가능. 모든 엑세스를 차단하는 설정에 체크.
        .travis.yml에 추가

            before_deploy:      // deploy 명령어가 실행되기 전에 수행됨. codleDeploy는 Jar파일은 인식못해 jar+기타 설정파일들을 모아 압축함.
              -zip -r juju *        //현재 위치에 모든 파일을 juju이름으로 압축함. 명령어의 마지막 위치는 본인 프로젝트의 이름.
              -mkdir -p deploy      //deploy라는 디렉토리를 travis ci가 실행 중인 위치에서 생성.
              -mv juju.zip deploy/juju.zip      //juju.zip 파일을 deploy/juju.zip으로 이동.
            deploy:         // s3로 파일업로드 혹은 codeDeploy로 배포 등 외부서비스와 연동될 행위들을 선언.
              - provider: s3
                access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
                secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
                bucket: nidlu-juju-build # S3 버킷
                region: ap-northeast-2
                skip_cleanup: true
                acl: private # zip 파일 접근을 private으로
                local_dir: deploy # before_deploy에서 생성한 디렉토리    //앞에서 생성한 deploy디렉토리를 지정. 해당위치의 파일만 S3으로 전송.
                wait-until-deployed: true

            //되지 않았다.

4. travis CI와 aws s3, codeDeploy 연동하기
    aws의 배포시스템인 codedeploy를 이용하기 전에 배포대상인 ec2가 codedeploy를 연동받을 수 있게 iam역할을 하나 생성.

    ec2에 iam 역할 추가하기
    ima 역할과 사용자 차이
        역할: aws서비스에만 할당할 수 있는 권한: ec2, codedeploy,sqs 등
        사용자: aws서비스 외에 사용할 수 있는 권한: 로컬pc, idc 서버등.

    지금 만들권한은 ec2에서 사용할 것. aws서비스->ec2
        정책은 AmazonEC2RoleforAWSCodeDeploy

    만든 역할을 ec2서비스에 등록.
        인스턴스->인스턴스 설정->iam역할바꾸기->재부팅.

    재부팅완료시 codedeploy의 요청을 받을 수 있게 에이전트 설치
        ec2에 접속해서 다음명령어 입력.
            aws s3 cp s3://aws-codedeploy-ap-northeast-2/latest/install . --region ap-northeast-
            성공시
                download: s3://aws-codedeploy-ap-northeast-2/latest/install to ./intall
            install파일에 실행권한 추가
            //포기:

    codedeploy를 위한 권한 생성.
        배포삼형제
            code commit: 깃허브처럼 코드저장소. 프라이빗 기능을 지원함. 깃허브도 지원함.
            code build: travis ci 빌드용서비스: 멀티 모듈을 배포하는 경우 사용할만하지만, 규모가 있는 서비스에선 대부분 젠킨스,/팀시티 등을 이용.
            code deploy: aws의 배포서비스. 대체제가 없음.

        code commit은 깃허브. code build는 travis ci가 하고 있음.

    travis CI, S3, CodeDeploy 연동
        먼저 S3에서 넘겨줄 zip파일을 저장할 디렉토리 생성. ec2서버에 접속해서 다음과 같이 디렉토리 설정
            mkdir ~/app/step2 && mkdir ~/app/step2/zip

        travis ci의 build가 끝나면 s3에 zip파일이 전송되고, 이 zip파일은 /home/ec2-user/app/step2/zip로 복사되어 압축 풀기
            travis ci 설정은 .travis.yml로 진행.
            AWS codedeploy 설정은 appsepc.yml로 진행
                version: 0.0        //codedeploy 버전. 프로젝트버전이 아니니 0.0 외 다른 버전을 사용하면 오류발생.
                os: linux
                files:
                    - source:   /       //codeDeploy에서 전달해준 파일 중 destination으로 이동시킬 대상을 지정. 루트경로(/)를 지정하면 전체파일.
                      destination: /home/ec2-user/app/step2/zip/        //source에서 지정된 파일을 받을 위치. 이후 jar를 실행하는 등 기능은 desination에서 옮긴 파일들로 진행.
                      overwrite: yes        //기존의 파일들이 있으면 덮어쓸지 결정.

        .travis.yml에 codeDeploy 내용을 추가. deploy항목에 다음코드를 추가.
            deploy:
                ...
              - provider: condedeploy
                access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정 된 값.
                secret_access_key: $AWS_SECRET_KEY # # Travis repo settings에 설정 된 값.
                bucket: juju #S3 버킷
                key: juju.zip #빌드파일을 압축해서 전달
                bundle_type: zip #압축확장자
                application: juju #웹콘솔에서 등록한 codeDeploy 애플리케이션
                deployment_group: juju-group # 웹콘솔에서 등록한 codedeploy 배포그룹
                region: ap-northeast-2
                wait-until-deployed: true



    9장 내용정리
        1. ci cd에 대한 소개
        2. github의 무료 ci서비스인 travis ci에 대한 소개와 프로젝트 연동방법
        3. AWS cd서비스인 code deploy에 대한 소개와 프로젝트 연동방법
        4. 수동배포방식에서 자동화방식으로 개선
        5. codeDeploy에서 오류로그를 보는 방법.
