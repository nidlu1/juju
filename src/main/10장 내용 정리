24시간 365일 중단 없는 서비스를 만들자.
    9장에서 travis ci를 활용해 배포자동화 환경을 구축.
        문제점: 새로운 jar가 실행되기 전까진 jar를 종료시킴.
    무중단배포의 방식
        AWS에서 블루그린 무중단배포
        도커를 이용한 웹서비스 무중단배포
        L4 스위치를 이용한 무중단배포
        Nginx를 이용한 무중단배포


2. 엔진엑스 설치와 스프링부트 연동하기
    엔진엑스 설치
            sudo yum install nginx
        엔진엑스 실행
            sudo service nginx start
            Starting nginx: [OK]
    보안그룹추가
        엔진엑스의 포트번호는 기본적으로 80
        ec2 인스턴스에 들어가 보안그룹 편집
    리다이렉션 주소추가
        80포트로 주소가 변경되니 구글과 네이버로그인도 변경된 주소 등록
        http://ec2-15-165-102-78.ap-northeast-2.compute.amazonaws.com/
    엔진엑스와 스프링부트연동
        sudo vim /etc/nginx/nginx.conf
        추가 코드
        include /etc/nginx/default.d/*.conf
        location /{
            proxy_pass http://localhost:8080;       //엔진엑스로 요청이 오면 http://localhost:8080로 전달
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    // proxy_set_header: 실제요청데이터를 header의 각 항목에 할당합니다
            proxy_set_header Host $http_host;
        }

        sudo service nginx restart

3.무중단배포 스크립트 만들기
    배포 전에 API 추가. ProfileControllerTest, ProfileControllerUnitTest

    application-real1.properties, application-real2.properties 생성.

    엔진엑스 설정 수정.
        무중단배포의 핵심은 엔진엑스 설정. 배포 때마다 엔진엑스의 프록시 설정(스프링부트로 요청을 흘려보내는)이 순식간에 교체됨. 여기서 프록시 설정이 교체될 수 있도록 추가함.
        엔진엑스 설정이 모여있는 /etc/nginx/conf.d/ 에 service-url.inc 생성
            sudo vim /etc/nginx/conf.d/service-url.inc
        코드 입력.
            set $service_url http://127.0.0.1:8080;
        저장하고 종료후, 해당파일은 엔진엑스가 사용할 수 있게 설정.
            sudo vim /etc/nginx/nginx.conf
            location / 부분을 찾아 변경.
                include /etc/nginx/conf.d/service-url.inc;
                location / {
                    proxy_pass $service_url;
                }
            재시작
                sudo service nginx restart

    배포스크립트들 작성.
        먼저 step2와 중복되지 않게 ec2에 step3 디렉토리를 생성
            mkdir ~/app/step3 && mkdir ~/app/step3/zip

        appspec.yml 역시 step3로 배포되도록 수정
            version: 0.0
            os: linux
            files:
                -source: /
                destination: /home/ec2-user/app/step3/zip/
                overwrite: yes

        무중단 배포를 진행할 스크립트는 5개
            stop.sh: 기존 엔진엑스에 연결되어 있진 않지만, 실행 중이던 스프링부트 종료
            start.sh: 배포할 신규버전 스프링부트 프로젝트를 stop.sh로 종료한 'profile'로 실행
            health.sh: 'start.sh'로 실행시킨 프로젝트가 정상적으로 실행됐는지 체크
            switch.sh: 엔진엑스가 바라보는 스프링부트를 최신버전으로 변경.
            profile.sh: 앞선 4개 스크립트 파일에서 공용으로 사용할 profile과 포트체크 로직.

        appspec.yml에 앞선 스크립트를 사용하도록 설정.
            version: 0.0
            os: linux
            files:
              - source: /
                destination: /home/ec2-user/app/step2/zip/
                overwrite: yes
            permission:
              - object: /
                pattern: "**"
                owner: ec2-user
                group: ec2-user
            hooks:
              AfterInstall:
                - location: stop.sh #엔진엑스와 연결되지 않은 스프링부트를 종료
                  timeout: 60
                  runas: ec2-user
              ApplicationStart:
                - location: start.sh #엔진엑스와 연결되어 있지 않은 Port로 새버전의 스프링부트를 시작.
                  timeout: 60
                  runas: ec2-user
              ValidateService:
                - location: health.sh #새 스프링부트가 정상적으로 실행되었는지 확인.
                  timeout: 60
                  runas: ec2-user

4. 무중단 배포테스트
    잦은배포로 jar파일명이 겹칠 수 있으니 자동으로 버전값이 변경될 수 있도록 조치
        build.gradle
            version '1.0.1-SNAPSHOP-'+new DATE().format("yyyyMMddHHmmss")
                // build.gradle은 Groovy 기반의 빌드툴. Groovy 언어의 여러 문법을 사용할 수 있음.
    최종코드를 깃허브로 푸시하고 진행되면 codedeploy로그로 잘 진행되는지 확인
        tail -f /opt/codedeploy-agent/deployment-root/deployment-logs/codedeploy-agent-deployments.log
    스프링부트 로그를 보고 싶으면 다음명령어로 확인
        vim ~/app/step3/nohup.out
    한번 더 배포하면 real2로 배포. 이과정에서 브라우저 새로고침해도 중단이 없다. 2번 배포 후 자바애플리케이션 실행여부 확인
        ps -ef | grep java
